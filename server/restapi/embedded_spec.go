// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a server for collaborative shopping.\n",
    "title": "CityProject for Auchan",
    "version": "1.0.0"
  },
  "host": "aeuchan.swagger.io",
  "basePath": "/v1",
  "paths": {
    "/basket": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "basket"
        ],
        "summary": "get all users baskets",
        "operationId": "getAllBaskets",
        "responses": {
          "200": {
            "description": "returns all available baskets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Basket"
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "basket"
        ],
        "summary": "create basket",
        "operationId": "createBasket",
        "parameters": [
          {
            "name": "basket",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Basket"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/basket/{basketId}/goods": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "goods"
        ],
        "summary": "return all goods in basket",
        "operationId": "getAllGoodsInBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns goods in basket",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Goods"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "goods"
        ],
        "summary": "change goods quantity in basket",
        "operationId": "addGoodsToBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          },
          {
            "name": "goods",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "productId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns current state of goods",
            "schema": {
              "$ref": "#/definitions/Goods"
            }
          }
        }
      }
    },
    "/basket/{basketId}/share": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "share"
        ],
        "summary": "get all shares for basket",
        "operationId": "getAllSharesForBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns created share",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Share"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "share"
        ],
        "summary": "add user to share",
        "operationId": "addUserToShare",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          },
          {
            "name": "share",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns created share",
            "schema": {
              "$ref": "#/definitions/Share"
            }
          }
        }
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "search for products",
        "operationId": "getProductsByParams",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns current user",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user email for login",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Auth-Token": {
                "type": "string",
                "description": "token to pass in every request to user auth"
              }
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "definitions": {
    "Basket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Goods": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "quantity": {
          "type": "integer"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Share": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "AuthToken": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "user"
    },
    {
      "description": "Operations about basket of goods",
      "name": "basket"
    },
    {
      "description": "Operations about products",
      "name": "product"
    },
    {
      "description": "Operations about goods (product added to the basket with price and quantity)",
      "name": "goods"
    },
    {
      "description": "Operations about share of basket with somebody",
      "name": "share"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a server for collaborative shopping.\n",
    "title": "CityProject for Auchan",
    "version": "1.0.0"
  },
  "host": "aeuchan.swagger.io",
  "basePath": "/v1",
  "paths": {
    "/basket": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "basket"
        ],
        "summary": "get all users baskets",
        "operationId": "getAllBaskets",
        "responses": {
          "200": {
            "description": "returns all available baskets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Basket"
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "basket"
        ],
        "summary": "create basket",
        "operationId": "createBasket",
        "parameters": [
          {
            "name": "basket",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Basket"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/basket/{basketId}/goods": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "goods"
        ],
        "summary": "return all goods in basket",
        "operationId": "getAllGoodsInBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns goods in basket",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Goods"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "goods"
        ],
        "summary": "change goods quantity in basket",
        "operationId": "addGoodsToBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          },
          {
            "name": "goods",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "productId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns current state of goods",
            "schema": {
              "$ref": "#/definitions/Goods"
            }
          }
        }
      }
    },
    "/basket/{basketId}/share": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "share"
        ],
        "summary": "get all shares for basket",
        "operationId": "getAllSharesForBasket",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns created share",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Share"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "share"
        ],
        "summary": "add user to share",
        "operationId": "addUserToShare",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "basketId",
            "in": "path",
            "required": true
          },
          {
            "name": "share",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns created share",
            "schema": {
              "$ref": "#/definitions/Share"
            }
          }
        }
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "search for products",
        "operationId": "getProductsByParams",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "security": [
          {
            "AuthToken": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns current user",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user email for login",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Auth-Token": {
                "type": "string",
                "description": "token to pass in every request to user auth"
              }
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "definitions": {
    "Basket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Goods": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "quantity": {
          "type": "integer"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Share": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "AuthToken": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "user"
    },
    {
      "description": "Operations about basket of goods",
      "name": "basket"
    },
    {
      "description": "Operations about products",
      "name": "product"
    },
    {
      "description": "Operations about goods (product added to the basket with price and quantity)",
      "name": "goods"
    },
    {
      "description": "Operations about share of basket with somebody",
      "name": "share"
    }
  ]
}`))
}
