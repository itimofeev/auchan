// Code generated by go-swagger; DO NOT EDIT.

package basket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// CreateBasketHandlerFunc turns a function with the right signature into a create basket handler
type CreateBasketHandlerFunc func(CreateBasketParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBasketHandlerFunc) Handle(params CreateBasketParams) middleware.Responder {
	return fn(params)
}

// CreateBasketHandler interface for that can handle valid create basket params
type CreateBasketHandler interface {
	Handle(CreateBasketParams) middleware.Responder
}

// NewCreateBasket creates a new http.Handler for the create basket operation
func NewCreateBasket(ctx *middleware.Context, handler CreateBasketHandler) *CreateBasket {
	return &CreateBasket{Context: ctx, Handler: handler}
}

/*CreateBasket swagger:route PUT /basket basket createBasket

create basket

*/
type CreateBasket struct {
	Context *middleware.Context
	Handler CreateBasketHandler
}

func (o *CreateBasket) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateBasketParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateBasketBody create basket body
// swagger:model CreateBasketBody
type CreateBasketBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create basket body
func (o *CreateBasketBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBasketBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("basket"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBasketBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBasketBody) UnmarshalBinary(b []byte) error {
	var res CreateBasketBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
