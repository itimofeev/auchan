// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProductsByParamsHandlerFunc turns a function with the right signature into a get products by params handler
type GetProductsByParamsHandlerFunc func(GetProductsByParamsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductsByParamsHandlerFunc) Handle(params GetProductsByParamsParams) middleware.Responder {
	return fn(params)
}

// GetProductsByParamsHandler interface for that can handle valid get products by params params
type GetProductsByParamsHandler interface {
	Handle(GetProductsByParamsParams) middleware.Responder
}

// NewGetProductsByParams creates a new http.Handler for the get products by params operation
func NewGetProductsByParams(ctx *middleware.Context, handler GetProductsByParamsHandler) *GetProductsByParams {
	return &GetProductsByParams{Context: ctx, Handler: handler}
}

/*GetProductsByParams swagger:route GET /product product getProductsByParams

search for products

*/
type GetProductsByParams struct {
	Context *middleware.Context
	Handler GetProductsByParamsHandler
}

func (o *GetProductsByParams) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProductsByParamsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
